{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","key","onClick","TodoList","setTodos","test","newTodos","console","log","updatedTodos","removedArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d9db9f20.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\n\r\nfunction TodoForm(props) {\r\n    const [input, setInput] = useState(props.edit ? props.edit.value : '');\r\n\r\n    const inputRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        inputRef.current.focus()\r\n    })\r\n\r\n    const handleChange = e => {\r\n        setInput(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        props.onSubmit({\r\n            id: Math.floor(Math.random() * 10000),\r\n            text: input\r\n        });\r\n\r\n        setInput('');\r\n    }\r\n    return (\r\n        <div>\r\n            <form className='todo-form' onSubmit={handleSubmit}>\r\n                {props.edit ? (<>\r\n                    <input\r\n                        type='text'\r\n                        placeholder='Update todo...'\r\n                        value={input}\r\n                        name='text'\r\n                        className='todo-input'\r\n                        onChange={handleChange}\r\n                        ref={inputRef}\r\n                    />\r\n                    <button className='todo-button edit'>Update</button></>) :\r\n                    (<>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='Add todo...'\r\n                            value={input}\r\n                            name='text'\r\n                            className='todo-input'\r\n                            onChange={handleChange}\r\n                            ref={inputRef}\r\n                        />\r\n                        <button className='todo-button'>Add</button></>)\r\n                };\r\n\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoForm\r\n","import React, { useState } from 'react'\r\nimport TodoForm from './TodoForm'\r\nimport { RiCloseCircleLine } from 'react-icons/ri';\r\nimport { TiEdit } from 'react-icons/ti';\r\n\r\nfunction Todo({ todos, completeTodo, removeTodo, updateTodo }) {\r\n    const [edit, setEdit] = useState({\r\n        id: null,\r\n        value: ''\r\n    });\r\n\r\n    const submitUpdate = value => {\r\n        updateTodo(edit.id, value);\r\n        setEdit({\r\n            id: null,\r\n            value: ''\r\n        });\r\n    };\r\n\r\n    if (edit.id) {\r\n        return <TodoForm edit={edit} onSubmit={submitUpdate} />;\r\n    }\r\n\r\n    return todos.map((todo, index) => (\r\n        <div\r\n            className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\r\n            key={index}\r\n        >\r\n            <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n                {todo.text}\r\n            </div>\r\n            <div className='icons'>\r\n                <RiCloseCircleLine\r\n                    onClick={() => removeTodo(todo.id)}\r\n                    className='delete-icon'\r\n                />\r\n                <TiEdit\r\n                    onClick={() => setEdit({ id: todo.id, value: todo.text })}\r\n                    className='edit-icon'\r\n                />\r\n            </div>\r\n        </div>\r\n    ))\r\n}\r\n\r\nexport default Todo\r\n","import React, { useState } from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport Todo from './Todo';\r\n\r\nfunction TodoList() {\r\n    const [todos, setTodos] = useState([]);\r\n\r\n    const addTodo = todo => {\r\n        if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n            return;\r\n        }\r\n\r\n        const newTodos = [todo, ...todos];\r\n\r\n        setTodos(newTodos);\r\n        console.log(...todos);\r\n    };\r\n\r\n    const updateTodo = (todoId, newValue) => {\r\n        if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n            return;\r\n        }\r\n\r\n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\r\n    };\r\n\r\n    const removeTodo = id => {\r\n        const removedArr = [...todos].filter(todo => todo.id !== id);\r\n\r\n        setTodos(removedArr);\r\n    };\r\n\r\n    const completeTodo = id => {\r\n        let updatedTodos = todos.map(todo => {\r\n            if (todo.id === id) {\r\n                todo.isComplete = !todo.isComplete;\r\n            }\r\n            return todo;\r\n        });\r\n        setTodos(updatedTodos);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <h1>What's the Plan for Today?</h1>\r\n            <TodoForm onSubmit={addTodo} />\r\n            <Todo\r\n                todos={todos}\r\n                completeTodo={completeTodo}\r\n                removeTodo={removeTodo}\r\n                updateTodo={updateTodo}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}